#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>

#define MAX_NO_CHAR 52

char* read_line() {
	char str[MAX_NO_CHAR];
	char *input_line;
	/*citire linie de la tastatura*/
	// fflush (stdin);
	if(fgets(str, MAX_NO_CHAR, stdin) != NULL) {
		input_line = (char*)malloc(strlen(str) * sizeof(char)); /*alocare memorie pentru linie*/
		/* stocare linie in vector de linii, fara ultimul caracter care e \n*/
		strncpy(input_line, str, strlen(str)-1); 
		input_line[strlen(str)-1] = '\0';

	} else {
		/*iese cu eroare daca nu s-a citit cu succes de la tastatura*/
		return NULL;
	}

	return input_line;
}

void free_lines(char** input_lines, int line_number) {
	for (int i = 0 ; i < line_number ; i++) {
		free(input_lines[i]);
	}
}

/*functia aloca memorie pentru un vector de linii (sir de caractere) si
citeste, pe rand, de la tastatura, linii pana la intalnirea sirului "END" 
si le stocheaza in vectorul de linii
returneaza vectorul de linii
primeste un parametru prin care se returneaza numarul de linii din vector*/
char** read_input_lines(int* line_number_result) {
	
	int line_number = 0;
	int input_lines_lenght = 1; /*lungimea vectorului de linii*/
	char** input_lines = (char**)malloc(sizeof(char*)); /*alocare vector de linii*/
	if(input_lines == NULL) {
		printf("Eroare la alocarea memoriei\n");
		return NULL;
	}
	/*stocheaza prima linie*/
	if((input_lines[0] = read_line()) == NULL) {
		printf("Eroare la citirea de la tastatura\n");
		free(input_lines); /*eliberez memoria alocata pentru vectorul de linii*/
		return NULL;
	}

	/*stocheaza liniile urmatoare*/
	while(strcmp(input_lines[line_number], "END") != 0) {
		
		line_number++;

		if (line_number == input_lines_lenght) {
			input_lines_lenght *= 2;
			input_lines = (char**)realloc(input_lines, input_lines_lenght * sizeof(char*));	//realocare vector de linii prin dublare
			if(input_lines == NULL) {
				printf("Eroare la realocarea memoriei\n");
				return NULL;
			}
		}

		
		if((input_lines[line_number] = read_line()) == NULL) {
			printf("Eroare la citirea de la tastatura\n");
			free_lines(input_lines, line_number); /*eliberez memoria alocata pentru liniile citite*/
			free(input_lines); /*eliberez memoria alocata pentru vectorul de linii*/
			return NULL;
		}	
	}
	*line_number_result = line_number;
	
	return input_lines;
}

/*functie care elibereaza memoria folosita de catre liniile citite
elibereaza pe rand fiecare linie, apoi elibereaza memoria alocata vectorului de linii*/
void free_input(char** input, int input_line_number) {
	for(int i = 0; i <= input_line_number; i++) {
		free(input[i]);
	}
	free(input);
}

long* check_numbers(char* line) {

	long* number = (long*)malloc(sizeof(long));
	if(number == NULL) {
		printf("Eroare la alocarea memoriei - long\n");
		return NULL;
	}
	*number = 0;
	int negative = 0; /*consider ca numarul nu este negativ*/

	if(strlen(line) > 1 && line[0] == '-') negative = 1; /*numarul este negativ*/
	
	for(int i = negative; i < strlen(line); i++) {
		if(line[i] < 49 || line[i] > 57) {
			free(number);
			return NULL;
		}
		else *number = *number*10 + (line[i] - '0');
	}
	if(negative == 1)
		*number *= -1;

	return number;
}

char* check_character(char* line) {
	
	char* character = (char*)malloc(sizeof(char));
	if(character == NULL) {
		printf("Eroare la alocarea memoriei - character\n");
		return NULL;
	}
	if(strlen(line) != 1) {
		free(character);
		return NULL;
	}
	else {
		if(line[0] < 32 || line[0] >=127 || (line[0] >=48 && line[0] <=57)) {
			free(character);
			return NULL;
		}
		else
			*character = line[0];
	}

	return character;
}

char* check_words(char* line) {

	char* word = (char*)malloc((strlen(line) + 1)*sizeof(char)); //am alocat memorie pentru a copia in word cu strcpy, si +1 pentru terminatorul de sir
	if(word == NULL) {
		printf("Eroare la alocarea memoriei - word\n");
		return NULL;
	}
	for(int i = 0; i < strlen(line); i++) {
		if(line[i] < 32 || line[i] >= 127) {
			free(word);
			return NULL;
		}
	}
	strcpy(word, line);

	return word;
}

int get_highest_divisor_from_string(char* line) {
	int l = strlen(line);

	for(int divisor = l / 2; divisor >= 1; divisor--) {
		if(l % divisor == 0)
			return divisor;
	}
}

int string_contains_digit(char* line) {
	char digits[] = "0123456789";

	for(int i = 0; i < strlen(line); i++) {
		if(strchr(digits, line[i]) != NULL)
			return 1;
	}
	return 0;
}

char* get_reversed_string(char* line) {
	char* reversed_word = (char*)malloc(strlen(line) * sizeof(char));

	if(reversed_word == NULL) {
		printf("Eroare la alocarea memoriei - reversed_word\n");
		return NULL;
	}
	int j = 0;

	for(int i = strlen(line) - 1; i >= 0; i--) {
		reversed_word[j] = line[i];
		j++;
	}
	return reversed_word;
}

char* get_encrypted_word_from_string(char* line) {
	char* encrypted_word = (char*)calloc((strlen(line) + 1), sizeof(char));

	if(encrypted_word == NULL) {
		printf("Eroare la alocarea memoriei - encrypted_word\n");
		return NULL;
	}
	int highest_divisor = get_highest_divisor_from_string(line);
	int breakpoint = strlen(line) - highest_divisor;

	if(!string_contains_digit(line)) {
		strncpy(encrypted_word, line + highest_divisor, breakpoint);
		strncpy(encrypted_word + breakpoint, line, highest_divisor);
		encrypted_word[strlen(encrypted_word)] = '\0';
	}
	else {
		char* reserved_string = get_reversed_string(line + highest_divisor);
		strncpy(encrypted_word, reserved_string, breakpoint);
		strncpy(encrypted_word + breakpoint, line, highest_divisor);
		encrypted_word[strlen(encrypted_word)] = '\0';
		free(reserved_string);
	}
	return encrypted_word;
}

long get_number_lenght(long number) {
	int count = 0;
	while(number) {
		number /= 10;
		count++;
	}
	return count;
}

long max_digit(long number) {
	int number_lenght = get_number_lenght(number);
	long max = number;

	for(int i = 0; i < number_lenght - 1; i++) {
		number = (number % 10) * pow(10, (number_lenght - 1)) + number / 10;
		if(number > max)
			max = number;
	}
	return max;
}

long min_digit(long number) {
	if(number < 0) 
		number = abs(number);
	int number_lenght = get_number_lenght(number);
	long min = number;

	for(int i = 0; i < number_lenght - 1; i++) {
		number = (number % 10) * pow(10, (number_lenght - 1)) + number / 10;
		if(number < min)
			min = number;
	}
	return min;
}

char get_frequent_character(char* line) {
	int* v = (int*)calloc(127, sizeof(int));
	char frequent_character;
	int maximum = 0;
	int i;

	for(i = 0; i < strlen(line); i++) {
		v[((int) line[i])]++;
	}
	for(i = 0; i < strlen(line); i++) {
		if(v[((int) line[i])] > maximum) {
			maximum = v[((int) line[i])];
			frequent_character = line[i];
		}
	}
	free(v);
	return frequent_character;
}

char get_infrequent_character(char* line) {
	int* v = (int*)calloc(127, sizeof(int));
	char infrequent_character = line[0];
	int minimum, i;

	minimum = strlen(line);
	for(i = 0; i < strlen(line); i++) {
		v[((int) line[i])]++;
	}
	for(i = 0; i < strlen(line); i++) {
		if(v[((int) line[i])] < minimum) {
			minimum = v[((int) line[i])];
			infrequent_character = line[i];
		}
	}
	free(v);
	return infrequent_character;
}

int main() {

	int input_line_number, nr_words = 0, nr_characters = 0, nr_numbers = 0;
	char** input = read_input_lines(&input_line_number);
	long* number;
	char* character;
	char* word;
	char* encrypted_word;

	//afisam prima linie (numarul de cuvinte, caractere, numere)
	for(int i = 0; i < (input_line_number) - 1; i++) {
		
		number = check_numbers(input[i]);
		if(number != NULL) {
			nr_numbers += 1;
			free(number);
		}
		else {
			character = check_character(input[i]);
			if(character != NULL) {
				nr_characters += 1;
				free(character);
			}
			else {
				word = check_words(input[i]);
				if(word != NULL) {
					nr_words += 1;
					free(word);
				}
			}
		}
	}
	printf("%d %d %d\n", nr_words, nr_characters, nr_numbers);

	//afisam a doua linie (mesajul criptat)
	for(int i = 0 ; i < (input_line_number) - 1; i++) {

		number = check_numbers(input[i]);
		if(number != NULL) {
			if(*number > 0){
				printf("%ld", max_digit(*number));
			}
			else{
				printf("%ld", min_digit(*number));
			}
			free(number);
		}
		else {
			character = check_character(input[i]);
			if(character != NULL) {
				char frequent_character = get_frequent_character(input[i]);
				char infrequent_character = get_infrequent_character(input[i]);
				printf("%c%c%c", frequent_character, *character, infrequent_character);
				free(character);
			}
			else {
				word = check_words(input[i]);
				if(word != NULL) {
					encrypted_word = get_encrypted_word_from_string(input[i]);
					printf("%s", encrypted_word);
					free(encrypted_word);
					free(word);
				}
			}
		}
	}
	printf("\n");

	free_input(input, input_line_number);

	return 0;
}
